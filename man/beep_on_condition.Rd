% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/beepr.R
\name{beep_on_condition}
\alias{beep_on_condition}
\title{Play short sounds based on signalled conditions}
\usage{
beep_on_condition(expr, l = c(warning = 1, error = 2, message = 3))
}
\arguments{
\item{expr}{An expression to be evaluated for errors.}

\item{l}{a named character/number vector/list specifying what sound to be played by
either specifying one of the built in sounds, specifying the path to a wav
file or specifying an url. The name of each element should be the class
of the condition which triggers it. Possible sounds are:
\enumerate{ \item \code{"ping"} \item \code{"coin"} \item \code{"fanfare"}
\item \code{"complete"} \item \code{"treasure"} \item \code{"ready"} \item
\code{"shotgun"} \item \code{"mario"} \item \code{"wilhelm"} \item
\code{"facebook"} \item \code{"sword"} } If \code{sound} does not match any
of the sounds above, or is a valid path or url, a random sound will be
played. Currently \code{beep} can only handle http urls, https is not
supported.}
}
\description{
\code{beep_on_condition} wraps an expression and plays short sounds whenever certain conditions are signalled, without restarting or halting the process. This is a general function and lets the user specify which sound(s) should play when which conditions are signalled via the \code{l} parameter. \cr \cr
\code{l} should be a named vector where each element in the list is a sound you want to play, and the name of that element is the "type" (i.e., class) of condition that you want to trigger the sound. \cr \cr
For example, \code{warning("test")} would signal a warning with the classes "simpleWarning", "warning", and "condition". If \code{l=c("simpleWarning"=1, "warning"=2, "error"=3)}, then \code{beep_on_condition} would beep the "1" and "2" sounds when it was signalled. If \code{l} doesn't have any of the classes of the condition being raised, it does not play a sound.
}
\examples{
\dontrun{
# Play a "ping" sound when \\code{expr} signals a warning,
#    functionally equivalent to `beep_on_warning(x, 1)`
beep_on_condition(warning("Oops!"), l=c("warning"=1))

# Plays two sounds on a warning, and one on messages and errors
beep_on_condition(
  {
    warning("Two sounds!")
    Sys.sleep(2)
    message("'Ready!'")
    Sys.sleep(1)
    stop("Mario")
  },
  l = list("warning" = 1, "simpleWarning" = 2,
           "message" = "ready", "error" = "mario")
)
}

}
